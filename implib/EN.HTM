<!DOCTYPE html>
<html dir="ltr" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta charset="utf-8">
<meta name="description" content="ImpLib SDK combines free programming tools for authoring custom import libraries with advanced features, like cdecl2stdcall conversion, importing by ordinal, removing original thunk.">
<meta property="og:type" content="website">
<meta property="og:title" content="ImpLib SDK Guide">
<meta property="og:description" content="ImpLib SDK combines free programming tools for authoring custom import libraries with advanced features, like cdecl2stdcall conversion, importing by ordinal, removing original thunk.">
<meta property="og:image" content="https://vkamenar.github.io/implib-sdk/logo.png">
<meta property="og:url" content="https://vkamenar.github.io/implib-sdk/EN.HTM">
<title>ImpLib SDK Guide</title>
<link rel="canonical" href="https://vkamenar.github.io/implib-sdk/EN.HTM">
<link rel="alternate" href="https://vkamenar.github.io/implib-sdk/EN.HTM" hreflang="en">
<link rel="alternate" href="https://vkamenar.github.io/implib-sdk/ES.HTM" hreflang="es">
<link rel="alternate" href="https://vkamenar.github.io/implib-sdk/RU.HTM" hreflang="ru">
<link rel="alternate" href="https://vkamenar.github.io/implib-sdk/EN.HTM" hreflang="x-default">
<LINK REL="icon" HREF="favicon.ico" TYPE="image/x-icon"><LINK REL="shortcut icon" HREF="favicon.ico" TYPE="image/x-icon">
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','GTM-MNG8M922');</script>
</head><body style="text-align:justify">
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MNG8M922" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<div id="top" itemscope itemtype="https://schema.org/Article"><meta itemprop="inLanguage" content="en">
<center><span style='color:#708090'>[ English | <a href='ES.HTM'>Espa&#241;ol</a> | <a href='RU.HTM'>Pycc&#954;u&#250;</a> ]</span>
<h2 itemprop="headline" style='margin:4px'>ImpLib SDK Guide</h2><span style='color:#708090'>[ <a href='https://github.com/vkamenar/implib-sdk/releases'>Download</a> | <a href='https://github.com/vkamenar/implib-sdk/discussions'>Discussions</a> ]</span></center>
<p align="right">Publication date: <b itemprop="datePublished">2007-02-01</b><br>Last update: <b itemprop="dateModified">2025-04-20</b><br>Author: <span itemprop="author" itemscope itemtype="https://schema.org/Person"><a itemprop="url" href="https://www.celersms.com/org/vkamenar.htm"><b itemprop="name"><link itemprop="sameAs" href="https://www.facebook.com/vladimir.kamenar.1"><link itemprop="sameAs" href="https://x.com/KamenarVladimir"><link itemprop="sameAs" href="https://www.linkedin.com/in/vladimir-kamenar/"><link itemprop="sameAs" href="https://www.wikidata.org/wiki/Q106606516">Vladimir Kame&#241;ar</b></a></span>
<div style="background:#e1f5fa;padding:10px;border:1px solid #abbbbf;display:inline-block">
<a href="#0">Installation and usage</a>
<br><a href="#1">How does it work?</a>
<br><a href="#2">DLL2DEF</a>
<br><a href="#3">Mods for Visual Basic and PureBasic</a>
<br><a href="#T1">MSVCRT.lib for MASM32 and NASM</a>
<br><a href="#T2">OpenAL PureBasic Userlib</a>
<br><a href="#4">Feedback</a>
</div><br>&nbsp;
<div itemprop="articleBody">
<p><div itemscope itemtype="https://schema.org/CreativeWork"><img itemprop="image" src='logo.png' alt="ImpLib SDK" width="33" height="21"> <b><span itemprop="name"><link itemprop="sameAs" href="https://www.wikidata.org/wiki/Q107297586">ImpLib SDK</span></b> <span itemprop="description">combines free programming tools for authoring custom import libraries for Windows DLL (32 and 64-bit). The SDK supports advanced features, like <i>cdecl2stdcall</i> conversion, importing by ordinal, removing <i>original thunk</i>, accessing internal undocumented functions</span>:
<ul>
<li>Importing by ordinal. For example, there's a DLL function: <code>MYDLL!dummy_function ord.20</code>.
Its symbolic name is <code>dummy_function</code> and its ordinal is 20. Usually, it's not recommended to import a symbol by ordinal because the ordinal may
change in a future version of the DLL. However, you can benefit from using ordinals if you know that the DLL version won't change or the DLL developer guarantees
backward compatibility regarding the ordinals, e.g., you are the DLL developer and you keep the ordinals fixed in every subsequent release.
Importing by ordinal significantly reduces the load time of an executable and makes the import section size smaller. By the way, if you plan to use the same DLL
build, consider <a href="https://learn.microsoft.com/en-us/cpp/build/reference/bind">binding</a> your executables. Binding improves the load time even further.
<li>Storing symbols from different DLL files in a single import library. For example, you can make a single import library containing the exported
entries from KERNEL32, USER32, GDI32 and other common Windows API DLLs and name it something like win32api.lib. Then, you can always link to
that single file instead of having to specify kernel32.lib, user32.lib, gdi32.lib and so on.
<li>When accessing non-<i>stdcall</i> DLL functions from Visual Basic 6, PureBasic and other popular development environments, sometimes the calling convention
might not be supported. ImpLib SDK is able to generate adaptation code to convert CDECL and other calling conventions to STDCALL with very little overhead.
<li>ImpLib SDK can generate libraries without <i>original thunk</i>, also known as "stripped" libraries. When using a library without original thunk, the final
executable won't contain the thunk payload. Therefore, you can produce smaller executable files by using this kind of libraries. To remove the original thunk,
turn off the <code>KEEP_ORIGINAL_THUNK</code> configuration parameter. An import directory without original thunk is not bindable, but otherwise perfectly valid
for all Windows versions.
</ul>
<p>The import libraries generated by the ImpLib SDK are compatible with any linker supporting the MS COFF object file format. In particular, the SDK has been
thoroughly tested for compatibility with the following linkers:
<ul>
<li>Pelle's Linker (<b>polink</b>) is a free reliable linker created by Pelle Orinius, the developer of <a href="http://www.smorgasbordet.com/pellesc/">Pelle's C</a>.
No compatibility issues detected when using 32 or 64-bit import, combining libraries with and without original thunk.
<li>MS Linker, which is part of Visual C++ and the Windows SDK. All versions are supported. The 32-bit version may produce error LNK1102 when loading import
libraries larger than a certain size. The ImpLib SDK will issue a compatibility warning when the import library exceeds the maximum size supported by the 32-bit
MS linker. Typically, this may happen when the DLL exports more than 1500 symbols. The size of each symbol matters as well. The workaround is to use the 64-bit
linker. When using the MS linker, it is not recommended to combine import libraries with and without original thunk. It is safer to use import libraries with or
without original thunk only, but not both. Otherwise, the import tables in the final executable might get corrupted.
<li>GNU Linker (<b>LD</b>) can be found, for example, in the <a href="https://www.mingw-w64.org/">MinGW</a> distributions. Both 32 and 64-bit DLL are supported.
This linker can be used to crosscompile to Win32 or Win64 from Linux or other OS. Import libraries without original thunk are supported as well.
<li>LLVM Linker (<a href="https://lld.llvm.org/"><b>lld-link</b></a>) is part of the LLVM project. It features high performance and cross-linking capabilities.
No compatibility issues detected. However, this linker expects a slightly different import library file structure. When compiling the import library for
compatibility with this linker it is necessary to turn on the <code>RENAME_AR_MEMBERS</code> configuration parameter. The same library can be used with the GNU
Linker. The following table summarizes the compatibility status.
</ul>
<table cellpadding=4 style="border:1px solid #ddd;margin-left:auto;margin-right:auto;text-align:center">
<tr><th>RENAME_AR_MEMBERS<th>Pelle's<br>(polink)<th>MS<th>GNU<br>(LD)<th>LLVM<br>(lld-link)
<tr><td>0<td>&#10003;<td>&#10003;<td>&#10003;<td>&#10007;
<tr><td>1<td>&#10007;<td>&#10007;<td>&#10003;<td>&#10003;
</table>
&nbsp;
<h4 id='0'>Installation and usage</h4>
<p>Unpack the ImpLib SDK release into any directory. Then launch <code>build_libs.bat</code>. This batch file builds or rebuilds the sample import libraries:
MSVCRT, Win32 and Win64 system API libraries.
<p>The output libraries are stored under the <code>lib</code> subdirectory. Two import libraries are created for each input file. One of the libraries follows
the MS format and internal naming conventions. The other one uses the format and naming compatible with GNU LD and LLVM. The latter is stored into the
<code>lib\lld</code> subdirectory.
<p>If you add new import library definitions or modify the sample files, just rerun <code>build_libs.bat</code>. Only new or moified files will be recompiled.
<br>&nbsp;
<h4 id='1'>How does it work?</h4>
<p>First, it's necessary to list the symbols (i.e. functions) exported by the given DLL. The list is saved in plain text format. The syntax is similar to
Microsoft's DEF file format. For example, let's make an import library with some file I/O functions exported by <code>KERNEL32.DLL</code>:<pre>
include 'implib.inc'

   ; KERNEL32.DLL
   implib kernel32.dll, CreateFileA
   implib kernel32.dll, CreateFileW
   implib kernel32.dll, ReadFile
   implib kernel32.dll, SetFilePointer
   implib kernel32.dll, CloseHandle

endlib
</pre>
<p>Everything preceded by a semicolon is a comment. Before starting to list the symbols, it's necessary to add a valid reference to either <code>implib.inc</code>
(32-bit DLL) or <code>implib64.inc</code> (64-bit DLL). A relative or full path is required unless you place <code>implib.inc</code> or <code>implib64.inc</code>
in the same directory where the DEF-file is located. After completing the list, don't forget to add the <code>endlib</code> macro. Every symbol definition is
created with the <code>implib</code> macro, followed by the DLL file name and the symbolic name of the function. You may specify the ordinal value instead of the
symbolic name, prefixing it with 'ord.':<pre>
   implib kernel32.dll, <span style="background-color:#FF0">ord.5</span>
</pre>
<p>If you want a symbol to be indexed by the linker with a different name, append another argument with the alias name:<pre>
   implib kernel32.dll, CreateFileA, <span style="background-color:#FF0">CreateFile</span>
</pre>
<p>When referring to <code>CreateFile</code> in your object file, the linker will actually resolve it as <code>KERNEL32!CreateFileA</code>.
Thus, by default, the 'A' suffix is not required in the object file. This feature is useful mostly for mangling symbolic names.
For example, MS tools assume that a 32-bit STDCALL function <code>CreateFileA</code> with 7 arguments should be named as <code>_CreateFileA@28</code>.
So, if we are linking to the 32-bit KERNEL32.DLL, let's rewrite our first example in a way compatible with the MS naming conventions:<pre>
include 'src\implib.inc'

   ; KERNEL32.DLL
   implib kernel32.dll, CreateFileA,    _CreateFileA@28
   implib kernel32.dll, CreateFileW,    _CreateFileW@28
   implib kernel32.dll, ReadFile,       _ReadFile@20
   implib kernel32.dll, SetFilePointer, _SetFilePointer@16
   implib kernel32.dll, CloseHandle,    _CloseHandle@4

endlib
</pre>
<p>As you see, 32-bit STDCALL names are prefixed with an underscore (<code>_</code>) and suffixed with the <i>at</i> sign and a decimal number (<code>@#</code>). The decimal number is the size in bytes of the argument list. Usually, it equals to the number of arguments x4 because most arguments on the stack are either 32-bit or aligned to a 32-bit boundary (32 bits = 4 bytes).
<p>This naming convention is not used in 64-bit mode. Therefore, if linking to the 64-bit KERNEL32.DLL, the list would look like follows:<pre>
include 'src\<span style="background-color:#FF0">implib64.inc</span>'

   ; KERNEL32.DLL
   implib kernel32.dll, CreateFileA
   implib kernel32.dll, CreateFileW
   implib kernel32.dll, ReadFile
   implib kernel32.dll, SetFilePointer
   implib kernel32.dll, CloseHandle

endlib
</pre>
<p>As you may notice, the DLL is named KERNEL32, even though the target platform is Win64. Microsoft is intentionally keeping the same DLL names.
<p>Save the def-file (either the 32 or 64-bit version). Let's call it <code>kernel32.def</code>, but you can choose any name you like. Now we are ready to compile it from the command line:
<p><center><table border=0 cellpadding=8>
<tr bgcolor=#000000><td><pre><font color=#FFFFFF>   <b>bin\fasm kernel32.def kernel32.lib</b>
   flat assembler  version 1.67.23  (533081 kilobytes memory) 
   DLL symbols indexed: 5
   3 passes, 4313 bytes.</font></table></center>
<p>We've got a file named <code>kernel32.lib</code>! By the way, <a href="https://flatassembler.net/">FASM</a> is an assembler, but its preprocessor is so powerful that we can use it to run the ImpLib scripting engine.
<p>There are more arguments to the <code>implib</code> macro. Just open <code>implib.inc</code> or <code>implib64.inc</code> in a plain text editor and read the header for additional information.
<br>&nbsp;
<div itemprop="hasPart" itemscope itemtype="https://schema.org/CreativeWork"><h4 id='2' itemprop="name"><link itemprop="sameAs" href="https://www.wikidata.org/wiki/Q107529066">DLL2DEF</h4>
<p itemprop="description">It's a command-line utility to extract the dynamic-link library symbols in plain text format. DLL2DEF supports both 32 and 64-bit DLL.</p>
</div>
</div>
<p>Since big DLLs might contain tons of useful functions, listing them manually in a text file would be very time-consuming. This tool, available in the <code>\bin</code> subdirectory, is useful to speed up the process. Running <code>dll2def</code> without arguments produces the following output:
<p><center><table border=0 cellpadding=8>
<tr bgcolor=#000000><td><pre><font color=#008000> ImpLib SDK DLL2DEF</font><font color=#FFFFFF>
 USAGE: dll2def [options] file [output]
   file   - input filename
   output - optional output filename
 Options:
   /COMPACT - Don't add comments
   /PB      - PureBasic mod
   /VB      - Visual Basic 6 mod
 Example:
 dll2def \windows\system32\kernel32.dll test.def </font></table></center>
<p>Let's give it a try:<pre>
   <b>dll2def c:\windows\system32\kernel32.dll</b>
</pre>
<p>We've got a file named <code>kernel32.def</code> listing all the KERNEL32.DLL functions.
The reference to <code>implib.inc</code> (32-bit DLL) or <code>implib64.inc</code> (64-bit DLL) contains the full path name if the inc-file is located in the same directory as <code>dll2def.exe</code>, so that you can move the def-file to any location without having to update the inc-file path.
Every symbol definition starts with some comments, for example:<pre>
   ; KERNEL32.AddVectoredExceptionHandler ord.9
   ; -> NTDLL.RtlAddVectoredExceptionHandler
   implib kernel32.dll, AddVectoredExceptionHandler
</pre>
<p>The comments include the full symbolic name (if available), the ordinal value and the forwarder chain, if any. Knowing the ordinal is useful if you have good reasons to replace the symbol definition with its ordinal. The forwarder chain means that the given symbol is actually located in another DLL. In the example above the symbol <code>AddVectoredExceptionHandler</code> exported by KERNEL32.DLL is actually forwarded to NTDLL. You can update the symbol definition to import the given symbol directly from the target DLL, but generally doing so is not recommended for compatibility reasons.
If you don't like to see those comments in the script, add <code>/COMPACT</code> to the command line before the input filename:<pre>
   <b>bin\dll2def /COMPACT c:\windows\system32\kernel32.dll</b>
</pre>
<br>&nbsp;
<h4 id='3'>Mods</h4>
<p>Currently ImpLib contains 2 mods:<ul>
<li>Visual Basic mod useful particularly for interfacing CDECL and other non-STDCALL DLLs in Visual Basic 6.
<li>PureBasic mod useful for making PureBasic Userlibs linking to external DLLs, especially CDECL DLLs.</ul>
<p>Replace the <code>implib</code> macro with <code>vbimplib</code> or <code>pbimplib</code> in the def-file to use the Visual Basic or PureBasic mods respectively. While calling DLL2DEF prepend a <code>/VB</code> or <code>/PB</code> argument to make it use the given mod scheme instead of the general purpose <code>implib</code>. Check the tutorials below for a quick start.
<p>Pick one of the following minitutorials for a real usage example:<ul>
<li>General purpose: <a href="#T1">MSVCRT.lib for MASM32 and NASM</a>.
<li>PureBasic mod: <a href="#T2">OpenAL PureBasic Userlib</a>.</ul>
<br>&nbsp;
<h4 id='T1'>MSVCRT.lib for MASM32 and NASM</h4>
<p>Microsoft Visual C Run-Time library (MSVCRT.DLL) exports over 1300 functions, automating many common programming tasks, like formatted console I/O, memory management, string manipulation, sorting and so on.
There is nothing you can't achieve by using the Windows API directly, but since the C Run-Time is almost always preinstalled in all Windows versions (except in Windows 95), sometimes it makes sense linking to CRT DLLs instead of hardcoding <code>printf()</code>, <code>malloc()</code>, etc. So, the goal of our first tutorial is making a couple of sample programs in MASM32 and NASM using MSVCRT.DLL.
<p>Let's start with MASM32. You will probably find a header file for MSVCRT, named <code>msvcrt.inc</code>, in the latest MASM32 release, but there is no <code>msvcrt.lib</code> file required by the linker. If you have Visual Studio installed, you can get the dynamic version of <code>msvcrt.lib</code> from there, but there is one little naming conflict with functions <code>div()</code> and <code>fabs()</code>. You can't use <code>div</code> or <code>fabs</code> as the name of a function in either MASM32 or NASM because there are homonymous mnemonics in the x86 instruction set. The same conflict arises when using names, containing only numeric characters, or any of the words reserved by the compiler, like <code>proc</code>, <code>label</code>, etc. Import libraries in Visual Studio sometimes introduce additional dependencies from <code>OLDNAMES.lib</code>, <code>UUID.lib</code> and others. It seems, you don't have permission to redistribute a Visual Studio's import library and that's why MASM32 doesn't include <code>msvcrt.lib</code>.
<p>So, we'll make our own <code>MSVCRT.lib</code> not copyrighted by any third party, not conflicting with MASM's or NASM's reserved words.
<p>The first step is making the def-file, containing all the public names found in MSVCRT.DLL:<pre>
   <b>dll2def /COMPACT \windows\system32\msvcrt.dll</b>
</pre>
<p>Next, we need to solve the naming conflict. So, open <code>msvcrt.def</code> in Notepad and search for the following line:<pre>
   implib msvcrt.dll, div
</pre>
<p>Since <code>div</code> is the unsigned integer division mnemonic, we need to rename this function to something else.
Steve Hutchesson (<i>Hutch</i>), the creator of the MASM32 SDK, suggested prefixing it with '<code>_crt_</code>' (there's a thread on this topic at masm32's official forum).
So, here's the replacement:<pre>
   implib msvcrt.dll, div, <span style="background-color:#FF0">_crt_</span>div
</pre>
<p>Do the same to <code>fabs</code> function. It is recommended adding a leading '<code>_</code>' preceding the thunk name to all function names not already starting with it, so that calling these functions would be possible via <code>invoke</code> thunk from MASM32. For example:<pre>
   ; MSVCRT.printf ord.742
   implib msvcrt.dll, printf
</pre>
<p>It is recommended to update it in the following way:<pre>
   ; MSVCRT.printf ord.742
   implib msvcrt.dll, printf, <span style="background-color:#FF0">_printf</span>
</pre>
<p>The same definition using the ordinal value would be:<pre>
   ; MSVCRT.printf ord.742
   implib msvcrt.dll, <span style="background-color:#FF0">ord.742</span>, _printf, __imp__printf
</pre>
<p>Since the real function name is lost when using its ordinal, it is recommended to specify the thunk name (<code>_printf</code>) and public import name (<code>__imp__printf</code>) explicitly this time. ImpLib won't complain if you don't specify them, but calling <code>printf()</code> will become more tricky.
<p>Proceed compiling the library. Since ImpLib runs interpreted by the FASM's preprocessor and the def-file contains a huge number of functions, it might take some time to complete the task:<pre>
   <b>\bin\fasm msvcrt.def msvcrt.lib</b>
   flat assembler  version 1.67.23  (518320 kilobytes memory)
   DLL symbols indexed: 1372
   3 passes, 21.4 seconds, 845227 bytes.
</pre>
<p>Now we have our own <code>msvcrt.lib</code>. Or a list of syntax errors, duplicate symbols and other sad messages. Just correct the typos and compile again.
A ready to use <code>msvcrt.def</code> is available under <code>\src\MSVCRT32</code>.
<p>In order to call CRT functions in MASM32 using <code>invoke</code>, you need to specify the prototypes.
There's an example of a header file with CRT prototypes in <code>\src\MSVCRT32\test_masm\msvcrt.inc</code>.
As an alternative, you can use <code>PROTO</code> instead of <code>externdef</code> syntax. For example:<pre>
   printf PROTO C :DWORD,:VARARG
</pre>
<p>Calling <code>printf()</code> using <code>invoke</code> with the above prototype will generate a <code>call &lt;jmp msvcrt!printf&gt;</code> instead of a direct <code>call msvcrt!printf</code>. Direct calls are usually faster. It is recommended to prototype the extern functions in the <code>externdef</code> manner:<pre>
   cdecl_dword_vararg typedef PROTO C :DWORD,:VARARG
   externdef _imp__printf:PTR cdecl_dword_vararg
   printf equ <_imp__printf>
</pre>
<p>This time invoking <code>printf()</code> will generate a direct call.
<p>Here's a sample MASM32 code performing a call to <code>MSVCRT!printf</code>:<pre>
   .386
   .model flat,stdcall

   ; MSVCRT API
   include msvcrt.inc
   includelib msvcrt.lib

   .CODE
   format db "Hello, world!",0

   start:
      invoke printf,OFFSET format
      ret
   END start
</pre>
<p>Let's compile, link and run it from the command line:<pre>
   <b>\masm32\bin\ml /c /coff test.asm
   \masm32\bin\link /SUBSYSTEM:CONSOLE test.obj
   test</b>
   Hello, world!
</pre>
<p>The same example for NASM:<pre>
   EXTERN __imp__printf
   %define printf [__imp__printf]

   section .text
   format db "Hello, world!",0

   GLOBAL _start
   _start:
      push format
      call printf
      add esp,4 ; fix the stack
      ret
</pre>
<p>Compile, link and run:<pre>
   <b>\nasm\nasm -fwin32 test.asm
   \nasm\polink /ENTRY:start /SUBSYSTEM:CONSOLE test.obj msvcrt.lib
   test</b>
   Hello, world!
</pre>
<p>MSVCRT.LIB tutorial ends here.
<br>&nbsp;
<h4 id='T2'>OpenAL PureBasic Userlib</h4>
<p>Our intention is building a PureBasic Userlib interfacing an external DLL. The example DLL is OPENAL32.DLL from the <a href="https://www.openal.org">OpenAL</a> v1.0/v1.1 redistributable. This DLL uses CDECL calling convention for all API functions.
We could use the <b>ImportC</b> syntax and the <code>OpenAL32.lib</code> file found in the OpenAL SDK, or just use <b>OpenLibrary</b> and then <b>CallCFunctionFast</b> every time we need to invoke an OpenAL function. The alternative approach in this tutorial is making a PureBasic Userlib, providing direct access to OpenAL, with a very small overhead.
The caller thunk will be faster compared to <b>CallCFunctionFast</b>, with prototype checking, inline help and any other advantages a Userlib is able to offer.
<p>First of all, we need to create the import description script:<pre>
   <b>bin/dll2def /PB /COMPACT \windows\system32\OpenAL32.dll</b>
</pre>
<p>This will create a file named <code>openal32.def</code>, listing all the public symbols found in OpenAL32.dll. For example:<pre>
   pbimplib OpenAL32.dll, STDCALL, 0, alBuffer3f
</pre>
<p>The complete <code>pbimplib</code> macro syntax is as follows:<pre>
   pbimplib dllname, convention, numarguments, real_name, PureBasics_name, public_name
</pre>
<p>The <code>dllname</code> parameter identifies the DLL's filename. The <code>convention</code> parameter identifies the calling convention for the specified function. The following values are currently supported:<ul>
<li><b>STDCALL</b> used by default in most Windows DLLs: KERNEL32.DLL, USER32.DLL, ...
<li><b>CDECL</b> used mostly in C DLLs: MSVCRT.DLL, OPENAL32.DLL, ...
<li><b>PBCALL</b> is PureBasic's calling convention. It's provided just in case and to make an example of extending the PBIMPLIB functionality. Somebody might consider adding more exotic calling conventions, like PASCAL, FASTCALL, etc.</ul>
<p><code>numarguments</code> tells the amount of doubleword (32-bit) values used in the stack frame for argument storage. It generally matches the amount of arguments, except when dealing with 64-bit parameters (<code>double</code>, <code>__int64</code> and so on). This value is not used in STDCALL.
<code>real_name</code> is the name actually defined in the DLL's export table. The last 2 parameters are optional.
<code>PureBasics_name</code> allows customizing the name of the function in PureBasic. By default, when not specified, <code>real_name</code> is used.
<code>public_name</code> is reserved for very specific issues, generally involving low-level assembly programming. It lets you specify the name of the symbol, used to call a function directly.
Take a look at the generated script file once again:<pre>
   pbimplib OpenAL32.dll, STDCALL, 0, alBuffer3f
</pre>
<p><code>alBuffer3f()</code> is not a STDCALL function and it doesn't receive 0 arguments. DLL2DEF just can't guess the number of arguments and the calling convention. Using "STDCALL, 0" just disables automatic stack fixing after calling the given function via thunk. The correct prototype should be:<pre>
   pbimplib OpenAL32.dll, <span style="background-color:#FF0">CDECL, 5</span>, alBuffer3f
</pre>
<p>You can update all the other definitions or just use the already fixed script <code>src\PureBasic\openal32.def</code>. Now, let's compile it:<pre>
   <b>bin\fasm openal32.def Pbopenal.lib</b>
</pre>
<p>No errors? - Fine. Now you need to create a library descriptor and name it exactly as the newly obtained import lib with a ".desc" extension. So, in the current example this file should be named <code>Pbopenal.desc</code>. Check the <code>[PureBasic]\SDK\Readme.txt</code> file for more information about the LibraryMaker tool.<pre>
   ; Langage used to code the library: ASM or C. You need to select C here.
   C

   ; Number of Windows DLL the library needs: none in this example.
   0

   ; Library type (Can be OBJ or LIB). Select LIB because Pbopenal.lib is a LIB.
   LIB

   ; Number of PureBasic libraries needed by this library: none in this example.
   0

   ; Directory name where the online help is available for the API.
   Help
</pre>
<p>The rest of the file depends on the actual library contents. There is an example: <code>src\PureBasic\Pbopenal.desc</code>. Finally, use <code>LibraryMaker.exe</code> to create the Userlib:<pre>
   <b>LibraryMaker .\PBopenal.desc</b>
</pre>
<p><b>Note:</b> When running LibraryMaker, make sure the path to the executable doesn't contain whitespaces.
<p>If the compilation was successful, just move the Userlib into <code>[PureBasic]\PureLibraries\UserLibraries</code> and try compiling a simple test application.
You can find multiple PureBasic OpenAL examples in the <a href="/pbopenal/">PureBasic OpenAL SDK</a> and the
<a href="https://ufmod.sourceforge.io/">&#181;FMOD</a> project.
<br>&nbsp;
<h4 id='4'>Feedback</h4>
<p>Thank you for taking the time to read this guide. Feel free to ask questions or provide comments and suggestions on
<a href="https://github.com/vkamenar/implib-sdk/discussions">GitHub</a> or <a href="https://sourceforge.net/p/implib/discussion/">SourceForge</a>.<br>&nbsp;
</div>
</div>
<div style="text-align:right"><a href="#top">Back to Top</a></div>
<center><small>&#169; 2006 - 2025 <a href="https://www.celersms.com/org/vkamenar.htm">Vladimir Kame&#241;ar</a>
<br>All rights reserved</small></center></body></html>